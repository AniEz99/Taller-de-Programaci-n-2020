
package webservices;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Publicador", targetNamespace = "http://webservices/")
@SOAPBinding(style = SOAPBinding.Style.RPC)
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Publicador {


    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @return
     *     returns byte[]
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/generarPdfRequest", output = "http://webservices/Publicador/generarPdfResponse")
    public byte[] generarPdf(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3,
        @WebParam(name = "arg4", partName = "arg4")
        String arg4,
        @WebParam(name = "arg5", partName = "arg5")
        String arg5);

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws Exception_Exception
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/registrarEspectadorRequest", output = "http://webservices/Publicador/registrarEspectadorResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://webservices/Publicador/registrarEspectador/Fault/UsuarioNoExisteException"),
        @FaultAction(className = Exception_Exception.class, value = "http://webservices/Publicador/registrarEspectador/Fault/Exception")
    })
    public void registrarEspectador(
        @WebParam(name = "arg0", partName = "arg0")
        EspectadorDto arg0,
        @WebParam(name = "arg1", partName = "arg1")
        ImagenDto arg1)
        throws Exception_Exception, UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws Exception_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/registrarArtistaRequest", output = "http://webservices/Publicador/registrarArtistaResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://webservices/Publicador/registrarArtista/Fault/Exception")
    })
    public void registrarArtista(
        @WebParam(name = "arg0", partName = "arg0")
        ArtistaDto arg0,
        @WebParam(name = "arg1", partName = "arg1")
        ImagenDto arg1)
        throws Exception_Exception
    ;

    /**
     * 
     * @return
     *     returns webservices.StringList
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/obtenerNicknamesUsuariosRequest", output = "http://webservices/Publicador/obtenerNicknamesUsuariosResponse")
    public StringList obtenerNicknamesUsuarios();

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws Exception_Exception
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/editarArtistaRequest", output = "http://webservices/Publicador/editarArtistaResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://webservices/Publicador/editarArtista/Fault/UsuarioNoExisteException"),
        @FaultAction(className = Exception_Exception.class, value = "http://webservices/Publicador/editarArtista/Fault/Exception")
    })
    public void editarArtista(
        @WebParam(name = "arg0", partName = "arg0")
        ArtistaDto arg0,
        @WebParam(name = "arg1", partName = "arg1")
        ImagenDto arg1)
        throws Exception_Exception, UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws Exception_Exception
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/editarEspectadorRequest", output = "http://webservices/Publicador/editarEspectadorResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://webservices/Publicador/editarEspectador/Fault/UsuarioNoExisteException"),
        @FaultAction(className = Exception_Exception.class, value = "http://webservices/Publicador/editarEspectador/Fault/Exception")
    })
    public void editarEspectador(
        @WebParam(name = "arg0", partName = "arg0")
        EspectadorDto arg0,
        @WebParam(name = "arg1", partName = "arg1")
        ImagenDto arg1)
        throws Exception_Exception, UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns webservices.UsuarioDto
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/obtenerUsuarioRequest", output = "http://webservices/Publicador/obtenerUsuarioResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://webservices/Publicador/obtenerUsuario/Fault/UsuarioNoExisteException")
    })
    public UsuarioDto obtenerUsuario(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns webservices.UsuarioDto
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/loginRequest", output = "http://webservices/Publicador/loginResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://webservices/Publicador/login/Fault/Exception")
    })
    public UsuarioDto login(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws Exception_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws Exception_Exception
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/seguirRequest", output = "http://webservices/Publicador/seguirResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://webservices/Publicador/seguir/Fault/UsuarioNoExisteException"),
        @FaultAction(className = Exception_Exception.class, value = "http://webservices/Publicador/seguir/Fault/Exception")
    })
    public void seguir(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws Exception_Exception, UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws Exception_Exception
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/dejarDeSeguirRequest", output = "http://webservices/Publicador/dejarDeSeguirResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://webservices/Publicador/dejarDeSeguir/Fault/UsuarioNoExisteException"),
        @FaultAction(className = Exception_Exception.class, value = "http://webservices/Publicador/dejarDeSeguir/Fault/Exception")
    })
    public void dejarDeSeguir(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws Exception_Exception, UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns webservices.EspectaculoDtoList
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/getEspectaculoAprobadosArtistaRequest", output = "http://webservices/Publicador/getEspectaculoAprobadosArtistaResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://webservices/Publicador/getEspectaculoAprobadosArtista/Fault/UsuarioNoExisteException")
    })
    public EspectaculoDtoList getEspectaculoAprobadosArtista(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @return
     *     returns webservices.StringList
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/getNombreArtistasRequest", output = "http://webservices/Publicador/getNombreArtistasResponse")
    public StringList getNombreArtistas();

    /**
     * 
     * @return
     *     returns webservices.ArtistaDtoList
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/getArtistasRequest", output = "http://webservices/Publicador/getArtistasResponse")
    public ArtistaDtoList getArtistas();

    /**
     * 
     * @return
     *     returns webservices.EspectadorDtoList
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/getEspectadoresRequest", output = "http://webservices/Publicador/getEspectadoresResponse")
    public EspectadorDtoList getEspectadores();

    /**
     * 
     * @param arg0
     * @throws PlataformaYaExisteException_Exception
     * @throws CamposIncompletosException_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/altaPlataformaRequest", output = "http://webservices/Publicador/altaPlataformaResponse", fault = {
        @FaultAction(className = PlataformaYaExisteException_Exception.class, value = "http://webservices/Publicador/altaPlataforma/Fault/PlataformaYaExisteException"),
        @FaultAction(className = CamposIncompletosException_Exception.class, value = "http://webservices/Publicador/altaPlataforma/Fault/CamposIncompletosException")
    })
    public void altaPlataforma(
        @WebParam(name = "arg0", partName = "arg0")
        PlataformaDto arg0)
        throws CamposIncompletosException_Exception, PlataformaYaExisteException_Exception
    ;

    /**
     * 
     * @return
     *     returns webservices.StringList
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/getNombrePlataformasRequest", output = "http://webservices/Publicador/getNombrePlataformasResponse")
    public StringList getNombrePlataformas();

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws Exception_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/crearPaqueteRequest", output = "http://webservices/Publicador/crearPaqueteResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://webservices/Publicador/crearPaquete/Fault/Exception")
    })
    public void crearPaquete(
        @WebParam(name = "arg0", partName = "arg0")
        PaqueteDto arg0,
        @WebParam(name = "arg1", partName = "arg1")
        ImagenDto arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2)
        throws Exception_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws Exception_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/crearPaqueteSinArtistaRequest", output = "http://webservices/Publicador/crearPaqueteSinArtistaResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://webservices/Publicador/crearPaqueteSinArtista/Fault/Exception")
    })
    public void crearPaqueteSinArtista(
        @WebParam(name = "arg0", partName = "arg0")
        PaqueteDto arg0,
        @WebParam(name = "arg1", partName = "arg1")
        ImagenDto arg1)
        throws Exception_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns webservices.EspectaculoDtoList
     * @throws NoExistePaqueteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/obtenerEspectaculosDePaqueteRequest", output = "http://webservices/Publicador/obtenerEspectaculosDePaqueteResponse", fault = {
        @FaultAction(className = NoExistePaqueteException_Exception.class, value = "http://webservices/Publicador/obtenerEspectaculosDePaquete/Fault/NoExistePaqueteException")
    })
    public EspectaculoDtoList obtenerEspectaculosDePaquete(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws NoExistePaqueteException_Exception
    ;

    /**
     * 
     * @return
     *     returns webservices.PaqueteDtoList
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/obtenerPaquetesRequest", output = "http://webservices/Publicador/obtenerPaquetesResponse")
    public PaqueteDtoList obtenerPaquetes();

    /**
     * 
     * @return
     *     returns webservices.PlataformaDtoList
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/obtenerPlataformasRequest", output = "http://webservices/Publicador/obtenerPlataformasResponse")
    public PlataformaDtoList obtenerPlataformas();

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns webservices.EspectaculoDtoList
     * @throws PlataformaNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/obtenerEspectaculosSinPaqueteRequest", output = "http://webservices/Publicador/obtenerEspectaculosSinPaqueteResponse", fault = {
        @FaultAction(className = PlataformaNoExisteException_Exception.class, value = "http://webservices/Publicador/obtenerEspectaculosSinPaquete/Fault/PlataformaNoExisteException")
    })
    public EspectaculoDtoList obtenerEspectaculosSinPaquete(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws PlataformaNoExisteException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws PaqueteYaExisteException_Exception
     * @throws NoExistePaqueteException_Exception
     * @throws EspectaculoYaExisteException_Exception
     * @throws PlataformaNoExisteException_Exception
     * @throws EspectaculoNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/agregarEspectaculoAPaqueteRequest", output = "http://webservices/Publicador/agregarEspectaculoAPaqueteResponse", fault = {
        @FaultAction(className = PlataformaNoExisteException_Exception.class, value = "http://webservices/Publicador/agregarEspectaculoAPaquete/Fault/PlataformaNoExisteException"),
        @FaultAction(className = EspectaculoNoExisteException_Exception.class, value = "http://webservices/Publicador/agregarEspectaculoAPaquete/Fault/EspectaculoNoExisteException"),
        @FaultAction(className = NoExistePaqueteException_Exception.class, value = "http://webservices/Publicador/agregarEspectaculoAPaquete/Fault/NoExistePaqueteException"),
        @FaultAction(className = PaqueteYaExisteException_Exception.class, value = "http://webservices/Publicador/agregarEspectaculoAPaquete/Fault/PaqueteYaExisteException"),
        @FaultAction(className = EspectaculoYaExisteException_Exception.class, value = "http://webservices/Publicador/agregarEspectaculoAPaquete/Fault/EspectaculoYaExisteException")
    })
    public void agregarEspectaculoAPaquete(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2)
        throws EspectaculoNoExisteException_Exception, EspectaculoYaExisteException_Exception, NoExistePaqueteException_Exception, PaqueteYaExisteException_Exception, PlataformaNoExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns webservices.PaqueteDtoList
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/buscarPaquetesRequest", output = "http://webservices/Publicador/buscarPaquetesResponse")
    public PaqueteDtoList buscarPaquetes(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns webservices.PaqueteDto
     * @throws NoExistePaqueteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/getPaqueteRequest", output = "http://webservices/Publicador/getPaqueteResponse", fault = {
        @FaultAction(className = NoExistePaqueteException_Exception.class, value = "http://webservices/Publicador/getPaquete/Fault/NoExistePaqueteException")
    })
    public PaqueteDto getPaquete(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws NoExistePaqueteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns webservices.StringList
     * @throws NoExistePaqueteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/getCategoriasDePaqueteRequest", output = "http://webservices/Publicador/getCategoriasDePaqueteResponse", fault = {
        @FaultAction(className = NoExistePaqueteException_Exception.class, value = "http://webservices/Publicador/getCategoriasDePaquete/Fault/NoExistePaqueteException")
    })
    public StringList getCategoriasDePaquete(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws NoExistePaqueteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns webservices.PaqueteDtoList
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/obtenerPaquetesPorPlataformaRequest", output = "http://webservices/Publicador/obtenerPaquetesPorPlataformaResponse")
    public PaqueteDtoList obtenerPaquetesPorPlataforma(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns webservices.PaqueteDtoList
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/obtenerPaquetesPorCategoriaRequest", output = "http://webservices/Publicador/obtenerPaquetesPorCategoriaResponse")
    public PaqueteDtoList obtenerPaquetesPorCategoria(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws PaqueteYaExisteException_Exception
     * @throws NoExistePaqueteException_Exception
     * @throws EspectadorNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/comprarPaqueteRequest", output = "http://webservices/Publicador/comprarPaqueteResponse", fault = {
        @FaultAction(className = EspectadorNoExisteException_Exception.class, value = "http://webservices/Publicador/comprarPaquete/Fault/EspectadorNoExisteException"),
        @FaultAction(className = PaqueteYaExisteException_Exception.class, value = "http://webservices/Publicador/comprarPaquete/Fault/PaqueteYaExisteException"),
        @FaultAction(className = NoExistePaqueteException_Exception.class, value = "http://webservices/Publicador/comprarPaquete/Fault/NoExistePaqueteException")
    })
    public void comprarPaquete(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws EspectadorNoExisteException_Exception, NoExistePaqueteException_Exception, PaqueteYaExisteException_Exception
    ;

    /**
     * 
     * @param arg7
     * @param arg6
     * @param arg9
     * @param arg8
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @param arg10
     * @param arg11
     * @param arg12
     * @throws Exception_Exception
     * @throws MinEspMayorAMaxEspException_Exception
     * @throws CategoriaNoExisteException_Exception
     * @throws UsuarioNoExisteException_Exception
     * @throws EspectaculoYaExisteException_Exception
     * @throws PlataformaNoExisteException_Exception
     * @throws YaExisteCategoriaException_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/confirmarAltaEspectaculoRequest", output = "http://webservices/Publicador/confirmarAltaEspectaculoResponse", fault = {
        @FaultAction(className = EspectaculoYaExisteException_Exception.class, value = "http://webservices/Publicador/confirmarAltaEspectaculo/Fault/EspectaculoYaExisteException"),
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://webservices/Publicador/confirmarAltaEspectaculo/Fault/UsuarioNoExisteException"),
        @FaultAction(className = PlataformaNoExisteException_Exception.class, value = "http://webservices/Publicador/confirmarAltaEspectaculo/Fault/PlataformaNoExisteException"),
        @FaultAction(className = MinEspMayorAMaxEspException_Exception.class, value = "http://webservices/Publicador/confirmarAltaEspectaculo/Fault/MinEspMayorAMaxEspException"),
        @FaultAction(className = CategoriaNoExisteException_Exception.class, value = "http://webservices/Publicador/confirmarAltaEspectaculo/Fault/CategoriaNoExisteException"),
        @FaultAction(className = YaExisteCategoriaException_Exception.class, value = "http://webservices/Publicador/confirmarAltaEspectaculo/Fault/YaExisteCategoriaException"),
        @FaultAction(className = Exception_Exception.class, value = "http://webservices/Publicador/confirmarAltaEspectaculo/Fault/Exception")
    })
    public void confirmarAltaEspectaculo(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3,
        @WebParam(name = "arg4", partName = "arg4")
        int arg4,
        @WebParam(name = "arg5", partName = "arg5")
        int arg5,
        @WebParam(name = "arg6", partName = "arg6")
        int arg6,
        @WebParam(name = "arg7", partName = "arg7")
        int arg7,
        @WebParam(name = "arg8", partName = "arg8")
        String arg8,
        @WebParam(name = "arg9", partName = "arg9")
        float arg9,
        @WebParam(name = "arg10", partName = "arg10")
        XMLGregorianCalendar arg10,
        @WebParam(name = "arg11", partName = "arg11")
        ImagenDto arg11,
        @WebParam(name = "arg12", partName = "arg12")
        CategoriaDtoList arg12)
        throws CategoriaNoExisteException_Exception, EspectaculoYaExisteException_Exception, Exception_Exception, MinEspMayorAMaxEspException_Exception, PlataformaNoExisteException_Exception, UsuarioNoExisteException_Exception, YaExisteCategoriaException_Exception
    ;

    /**
     * 
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/cancelarAltaEspectaculoRequest", output = "http://webservices/Publicador/cancelarAltaEspectaculoResponse")
    public void cancelarAltaEspectaculo();

    /**
     * 
     * @param arg0
     * @return
     *     returns webservices.EspectaculoDtoList
     * @throws PlataformaNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/obtenerEspectaculosPorPlataformaRequest", output = "http://webservices/Publicador/obtenerEspectaculosPorPlataformaResponse", fault = {
        @FaultAction(className = PlataformaNoExisteException_Exception.class, value = "http://webservices/Publicador/obtenerEspectaculosPorPlataforma/Fault/PlataformaNoExisteException")
    })
    public EspectaculoDtoList obtenerEspectaculosPorPlataforma(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws PlataformaNoExisteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns webservices.EspectaculoDto
     * @throws PlataformaNoExisteException_Exception
     * @throws EspectaculoNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/obtenerDatosEspectaculoRequest", output = "http://webservices/Publicador/obtenerDatosEspectaculoResponse", fault = {
        @FaultAction(className = PlataformaNoExisteException_Exception.class, value = "http://webservices/Publicador/obtenerDatosEspectaculo/Fault/PlataformaNoExisteException"),
        @FaultAction(className = EspectaculoNoExisteException_Exception.class, value = "http://webservices/Publicador/obtenerDatosEspectaculo/Fault/EspectaculoNoExisteException")
    })
    public EspectaculoDto obtenerDatosEspectaculo(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws EspectaculoNoExisteException_Exception, PlataformaNoExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns webservices.EspectaculoDtoList
     * @throws PlataformaNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/ingresarPlataformaRequest", output = "http://webservices/Publicador/ingresarPlataformaResponse", fault = {
        @FaultAction(className = PlataformaNoExisteException_Exception.class, value = "http://webservices/Publicador/ingresarPlataforma/Fault/PlataformaNoExisteException")
    })
    public EspectaculoDtoList ingresarPlataforma(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws PlataformaNoExisteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns webservices.FuncionDtoList
     * @throws PlataformaNoExisteException_Exception
     * @throws EspectaculoNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/seleccionarEspectaculoYRetornarFuncionesRequest", output = "http://webservices/Publicador/seleccionarEspectaculoYRetornarFuncionesResponse", fault = {
        @FaultAction(className = EspectaculoNoExisteException_Exception.class, value = "http://webservices/Publicador/seleccionarEspectaculoYRetornarFunciones/Fault/EspectaculoNoExisteException"),
        @FaultAction(className = PlataformaNoExisteException_Exception.class, value = "http://webservices/Publicador/seleccionarEspectaculoYRetornarFunciones/Fault/PlataformaNoExisteException")
    })
    public FuncionDtoList seleccionarEspectaculoYRetornarFunciones(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws EspectaculoNoExisteException_Exception, PlataformaNoExisteException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns webservices.FuncionDto
     * @throws PlataformaNoExisteException_Exception
     * @throws EspectaculoNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/seleccionarFuncionRequest", output = "http://webservices/Publicador/seleccionarFuncionResponse", fault = {
        @FaultAction(className = PlataformaNoExisteException_Exception.class, value = "http://webservices/Publicador/seleccionarFuncion/Fault/PlataformaNoExisteException"),
        @FaultAction(className = EspectaculoNoExisteException_Exception.class, value = "http://webservices/Publicador/seleccionarFuncion/Fault/EspectaculoNoExisteException")
    })
    public FuncionDto seleccionarFuncion(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2)
        throws EspectaculoNoExisteException_Exception, PlataformaNoExisteException_Exception
    ;

    /**
     * 
     * @return
     *     returns webservices.ArtistaDtoList
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/obtenerArtistasRequest", output = "http://webservices/Publicador/obtenerArtistasResponse")
    public ArtistaDtoList obtenerArtistas();

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @param arg7
     * @param arg6
     * @throws PlataformaNoExisteException_Exception
     * @throws FuncionYaExisteException_Exception
     * @throws EspectaculoNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/confirmarAltaFuncionRequest", output = "http://webservices/Publicador/confirmarAltaFuncionResponse", fault = {
        @FaultAction(className = FuncionYaExisteException_Exception.class, value = "http://webservices/Publicador/confirmarAltaFuncion/Fault/FuncionYaExisteException"),
        @FaultAction(className = PlataformaNoExisteException_Exception.class, value = "http://webservices/Publicador/confirmarAltaFuncion/Fault/PlataformaNoExisteException"),
        @FaultAction(className = EspectaculoNoExisteException_Exception.class, value = "http://webservices/Publicador/confirmarAltaFuncion/Fault/EspectaculoNoExisteException")
    })
    public void confirmarAltaFuncion(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        int arg1,
        @WebParam(name = "arg2", partName = "arg2")
        int arg2,
        @WebParam(name = "arg3", partName = "arg3")
        XMLGregorianCalendar arg3,
        @WebParam(name = "arg4", partName = "arg4")
        StringList arg4,
        @WebParam(name = "arg5", partName = "arg5")
        EspectaculoDto arg5,
        @WebParam(name = "arg6", partName = "arg6")
        PlataformaDto arg6,
        @WebParam(name = "arg7", partName = "arg7")
        String arg7)
        throws EspectaculoNoExisteException_Exception, FuncionYaExisteException_Exception, PlataformaNoExisteException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @param arg7
     * @param arg6
     * @return
     *     returns boolean
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/confirmarAltaFuncion2Request", output = "http://webservices/Publicador/confirmarAltaFuncion2Response", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://webservices/Publicador/confirmarAltaFuncion2/Fault/Exception")
    })
    public boolean confirmarAltaFuncion2(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        int arg1,
        @WebParam(name = "arg2", partName = "arg2")
        int arg2,
        @WebParam(name = "arg3", partName = "arg3")
        XMLGregorianCalendar arg3,
        @WebParam(name = "arg4", partName = "arg4")
        StringList arg4,
        @WebParam(name = "arg5", partName = "arg5")
        String arg5,
        @WebParam(name = "arg6", partName = "arg6")
        String arg6,
        @WebParam(name = "arg7", partName = "arg7")
        ImagenDto arg7)
        throws Exception_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws PlataformaNoExisteException_Exception
     * @throws EspectaculoNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/finalizarEspectaculoRequest", output = "http://webservices/Publicador/finalizarEspectaculoResponse", fault = {
        @FaultAction(className = PlataformaNoExisteException_Exception.class, value = "http://webservices/Publicador/finalizarEspectaculo/Fault/PlataformaNoExisteException"),
        @FaultAction(className = EspectaculoNoExisteException_Exception.class, value = "http://webservices/Publicador/finalizarEspectaculo/Fault/EspectaculoNoExisteException")
    })
    public void finalizarEspectaculo(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws EspectaculoNoExisteException_Exception, PlataformaNoExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns webservices.EspectaculoDtoList
     * @throws PlataformaNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/obtenerEspectaculosAceptadosPorPlataformaRequest", output = "http://webservices/Publicador/obtenerEspectaculosAceptadosPorPlataformaResponse", fault = {
        @FaultAction(className = PlataformaNoExisteException_Exception.class, value = "http://webservices/Publicador/obtenerEspectaculosAceptadosPorPlataforma/Fault/PlataformaNoExisteException")
    })
    public EspectaculoDtoList obtenerEspectaculosAceptadosPorPlataforma(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws PlataformaNoExisteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns webservices.FuncionDtoList
     * @throws PlataformaNoExisteException_Exception
     * @throws EspectaculoNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/obtenerFuncionesVigentesDeEspectaculoRequest", output = "http://webservices/Publicador/obtenerFuncionesVigentesDeEspectaculoResponse", fault = {
        @FaultAction(className = PlataformaNoExisteException_Exception.class, value = "http://webservices/Publicador/obtenerFuncionesVigentesDeEspectaculo/Fault/PlataformaNoExisteException"),
        @FaultAction(className = EspectaculoNoExisteException_Exception.class, value = "http://webservices/Publicador/obtenerFuncionesVigentesDeEspectaculo/Fault/EspectaculoNoExisteException")
    })
    public FuncionDtoList obtenerFuncionesVigentesDeEspectaculo(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws EspectaculoNoExisteException_Exception, PlataformaNoExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns webservices.EspectadorDtoList
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/obtenerEspectadoresNoRegistradosEnFuncionRequest", output = "http://webservices/Publicador/obtenerEspectadoresNoRegistradosEnFuncionResponse")
    public EspectadorDtoList obtenerEspectadoresNoRegistradosEnFuncion(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns webservices.PaqueteDtoList
     * @throws EspectadorNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/obtenerPaquetesEspectadorEspectaculoRequest", output = "http://webservices/Publicador/obtenerPaquetesEspectadorEspectaculoResponse", fault = {
        @FaultAction(className = EspectadorNoExisteException_Exception.class, value = "http://webservices/Publicador/obtenerPaquetesEspectadorEspectaculo/Fault/EspectadorNoExisteException")
    })
    public PaqueteDtoList obtenerPaquetesEspectadorEspectaculo(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws EspectadorNoExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns webservices.RegistroDtoList
     * @throws EspectadorNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/obtenerRegistrosEspectadorRequest", output = "http://webservices/Publicador/obtenerRegistrosEspectadorResponse", fault = {
        @FaultAction(className = EspectadorNoExisteException_Exception.class, value = "http://webservices/Publicador/obtenerRegistrosEspectador/Fault/EspectadorNoExisteException")
    })
    public RegistroDtoList obtenerRegistrosEspectador(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws EspectadorNoExisteException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg4
     * @param arg1
     * @param arg0
     * @throws YaExisteRegistroException_Exception
     * @throws FaltanRegistroException_Exception
     * @throws FuncionNoExisteException_Exception
     * @throws RegistroNoExisteException_Exception
     * @throws EspectadorNoExisteException_Exception
     * @throws PlataformaNoExisteException_Exception
     * @throws EspectaculoNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/altaRegistroConCanjeRequest", output = "http://webservices/Publicador/altaRegistroConCanjeResponse", fault = {
        @FaultAction(className = PlataformaNoExisteException_Exception.class, value = "http://webservices/Publicador/altaRegistroConCanje/Fault/PlataformaNoExisteException"),
        @FaultAction(className = EspectaculoNoExisteException_Exception.class, value = "http://webservices/Publicador/altaRegistroConCanje/Fault/EspectaculoNoExisteException"),
        @FaultAction(className = FuncionNoExisteException_Exception.class, value = "http://webservices/Publicador/altaRegistroConCanje/Fault/FuncionNoExisteException"),
        @FaultAction(className = EspectadorNoExisteException_Exception.class, value = "http://webservices/Publicador/altaRegistroConCanje/Fault/EspectadorNoExisteException"),
        @FaultAction(className = YaExisteRegistroException_Exception.class, value = "http://webservices/Publicador/altaRegistroConCanje/Fault/YaExisteRegistroException"),
        @FaultAction(className = RegistroNoExisteException_Exception.class, value = "http://webservices/Publicador/altaRegistroConCanje/Fault/RegistroNoExisteException"),
        @FaultAction(className = FaltanRegistroException_Exception.class, value = "http://webservices/Publicador/altaRegistroConCanje/Fault/FaltanRegistroException")
    })
    public void altaRegistroConCanje(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3,
        @WebParam(name = "arg4", partName = "arg4")
        StringList arg4)
        throws EspectaculoNoExisteException_Exception, EspectadorNoExisteException_Exception, FaltanRegistroException_Exception, FuncionNoExisteException_Exception, PlataformaNoExisteException_Exception, RegistroNoExisteException_Exception, YaExisteRegistroException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg4
     * @param arg1
     * @param arg0
     * @throws YaExisteRegistroException_Exception
     * @throws FuncionNoExisteException_Exception
     * @throws EspectadorNoExisteException_Exception
     * @throws PlataformaNoExisteException_Exception
     * @throws EspectaculoNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/altaRegistroPaqueteRequest", output = "http://webservices/Publicador/altaRegistroPaqueteResponse", fault = {
        @FaultAction(className = PlataformaNoExisteException_Exception.class, value = "http://webservices/Publicador/altaRegistroPaquete/Fault/PlataformaNoExisteException"),
        @FaultAction(className = EspectaculoNoExisteException_Exception.class, value = "http://webservices/Publicador/altaRegistroPaquete/Fault/EspectaculoNoExisteException"),
        @FaultAction(className = FuncionNoExisteException_Exception.class, value = "http://webservices/Publicador/altaRegistroPaquete/Fault/FuncionNoExisteException"),
        @FaultAction(className = EspectadorNoExisteException_Exception.class, value = "http://webservices/Publicador/altaRegistroPaquete/Fault/EspectadorNoExisteException"),
        @FaultAction(className = YaExisteRegistroException_Exception.class, value = "http://webservices/Publicador/altaRegistroPaquete/Fault/YaExisteRegistroException")
    })
    public void altaRegistroPaquete(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3,
        @WebParam(name = "arg4", partName = "arg4")
        String arg4)
        throws EspectaculoNoExisteException_Exception, EspectadorNoExisteException_Exception, FuncionNoExisteException_Exception, PlataformaNoExisteException_Exception, YaExisteRegistroException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws YaExisteRegistroException_Exception
     * @throws FuncionNoExisteException_Exception
     * @throws EspectadorNoExisteException_Exception
     * @throws EspectaculoNoAceptadoException_Exception
     * @throws PlataformaNoExisteException_Exception
     * @throws EspectaculoNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/altaRegistroComunRequest", output = "http://webservices/Publicador/altaRegistroComunResponse", fault = {
        @FaultAction(className = PlataformaNoExisteException_Exception.class, value = "http://webservices/Publicador/altaRegistroComun/Fault/PlataformaNoExisteException"),
        @FaultAction(className = EspectaculoNoExisteException_Exception.class, value = "http://webservices/Publicador/altaRegistroComun/Fault/EspectaculoNoExisteException"),
        @FaultAction(className = FuncionNoExisteException_Exception.class, value = "http://webservices/Publicador/altaRegistroComun/Fault/FuncionNoExisteException"),
        @FaultAction(className = EspectadorNoExisteException_Exception.class, value = "http://webservices/Publicador/altaRegistroComun/Fault/EspectadorNoExisteException"),
        @FaultAction(className = YaExisteRegistroException_Exception.class, value = "http://webservices/Publicador/altaRegistroComun/Fault/YaExisteRegistroException"),
        @FaultAction(className = EspectaculoNoAceptadoException_Exception.class, value = "http://webservices/Publicador/altaRegistroComun/Fault/EspectaculoNoAceptadoException")
    })
    public void altaRegistroComun(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3)
        throws EspectaculoNoAceptadoException_Exception, EspectaculoNoExisteException_Exception, EspectadorNoExisteException_Exception, FuncionNoExisteException_Exception, PlataformaNoExisteException_Exception, YaExisteRegistroException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns webservices.EspectaculoDtoList
     * @throws PlataformaNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/obtenerEspectaculosIngresadosRequest", output = "http://webservices/Publicador/obtenerEspectaculosIngresadosResponse", fault = {
        @FaultAction(className = PlataformaNoExisteException_Exception.class, value = "http://webservices/Publicador/obtenerEspectaculosIngresados/Fault/PlataformaNoExisteException")
    })
    public EspectaculoDtoList obtenerEspectaculosIngresados(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws PlataformaNoExisteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws PlataformaNoExisteException_Exception
     * @throws EspectaculoNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/aceptarEspectaculoRequest", output = "http://webservices/Publicador/aceptarEspectaculoResponse", fault = {
        @FaultAction(className = EspectaculoNoExisteException_Exception.class, value = "http://webservices/Publicador/aceptarEspectaculo/Fault/EspectaculoNoExisteException"),
        @FaultAction(className = PlataformaNoExisteException_Exception.class, value = "http://webservices/Publicador/aceptarEspectaculo/Fault/PlataformaNoExisteException")
    })
    public void aceptarEspectaculo(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws EspectaculoNoExisteException_Exception, PlataformaNoExisteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws PlataformaNoExisteException_Exception
     * @throws EspectaculoNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/cancelarEspectaculoRequest", output = "http://webservices/Publicador/cancelarEspectaculoResponse", fault = {
        @FaultAction(className = EspectaculoNoExisteException_Exception.class, value = "http://webservices/Publicador/cancelarEspectaculo/Fault/EspectaculoNoExisteException"),
        @FaultAction(className = PlataformaNoExisteException_Exception.class, value = "http://webservices/Publicador/cancelarEspectaculo/Fault/PlataformaNoExisteException")
    })
    public void cancelarEspectaculo(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws EspectaculoNoExisteException_Exception, PlataformaNoExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns webservices.EspectaculoDtoList
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/buscarEspectaculosRequest", output = "http://webservices/Publicador/buscarEspectaculosResponse")
    public EspectaculoDtoList buscarEspectaculos(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg0
     * @throws YaExisteCategoriaException_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/altaCategoriaRequest", output = "http://webservices/Publicador/altaCategoriaResponse", fault = {
        @FaultAction(className = YaExisteCategoriaException_Exception.class, value = "http://webservices/Publicador/altaCategoria/Fault/YaExisteCategoriaException")
    })
    public void altaCategoria(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws YaExisteCategoriaException_Exception
    ;

    /**
     * 
     * @return
     *     returns webservices.CategoriaDtoList
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/listarCategoriasRequest", output = "http://webservices/Publicador/listarCategoriasResponse")
    public CategoriaDtoList listarCategorias();

    /**
     * 
     * @param arg0
     * @return
     *     returns webservices.EspectaculoDtoList
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/obtenerEspectaculosPorCategoriaRequest", output = "http://webservices/Publicador/obtenerEspectaculosPorCategoriaResponse")
    public EspectaculoDtoList obtenerEspectaculosPorCategoria(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns webservices.RegistroDtoList
     * @throws EspectadorNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/obtenerTodosRegistrosEspectadorRequest", output = "http://webservices/Publicador/obtenerTodosRegistrosEspectadorResponse", fault = {
        @FaultAction(className = EspectadorNoExisteException_Exception.class, value = "http://webservices/Publicador/obtenerTodosRegistrosEspectador/Fault/EspectadorNoExisteException")
    })
    public RegistroDtoList obtenerTodosRegistrosEspectador(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws EspectadorNoExisteException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws EspectadorNoExisteException_Exception
     * @throws PlataformaNoExisteException_Exception
     * @throws EspectaculoNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/marcarEspectaculoFavoritoRequest", output = "http://webservices/Publicador/marcarEspectaculoFavoritoResponse", fault = {
        @FaultAction(className = PlataformaNoExisteException_Exception.class, value = "http://webservices/Publicador/marcarEspectaculoFavorito/Fault/PlataformaNoExisteException"),
        @FaultAction(className = EspectaculoNoExisteException_Exception.class, value = "http://webservices/Publicador/marcarEspectaculoFavorito/Fault/EspectaculoNoExisteException"),
        @FaultAction(className = EspectadorNoExisteException_Exception.class, value = "http://webservices/Publicador/marcarEspectaculoFavorito/Fault/EspectadorNoExisteException")
    })
    public void marcarEspectaculoFavorito(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2)
        throws EspectaculoNoExisteException_Exception, EspectadorNoExisteException_Exception, PlataformaNoExisteException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws EspectadorNoExisteException_Exception
     * @throws PlataformaNoExisteException_Exception
     * @throws EspectaculoNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/desmarcarEspectaculoFavoritoRequest", output = "http://webservices/Publicador/desmarcarEspectaculoFavoritoResponse", fault = {
        @FaultAction(className = PlataformaNoExisteException_Exception.class, value = "http://webservices/Publicador/desmarcarEspectaculoFavorito/Fault/PlataformaNoExisteException"),
        @FaultAction(className = EspectaculoNoExisteException_Exception.class, value = "http://webservices/Publicador/desmarcarEspectaculoFavorito/Fault/EspectaculoNoExisteException"),
        @FaultAction(className = EspectadorNoExisteException_Exception.class, value = "http://webservices/Publicador/desmarcarEspectaculoFavorito/Fault/EspectadorNoExisteException")
    })
    public void desmarcarEspectaculoFavorito(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2)
        throws EspectaculoNoExisteException_Exception, EspectadorNoExisteException_Exception, PlataformaNoExisteException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws ValoracionNoValidaException_Exception
     * @throws EspectadorNoExisteException_Exception
     * @throws PlataformaNoExisteException_Exception
     * @throws EspectaculoNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/valorarEspectaculoRequest", output = "http://webservices/Publicador/valorarEspectaculoResponse", fault = {
        @FaultAction(className = PlataformaNoExisteException_Exception.class, value = "http://webservices/Publicador/valorarEspectaculo/Fault/PlataformaNoExisteException"),
        @FaultAction(className = EspectaculoNoExisteException_Exception.class, value = "http://webservices/Publicador/valorarEspectaculo/Fault/EspectaculoNoExisteException"),
        @FaultAction(className = EspectadorNoExisteException_Exception.class, value = "http://webservices/Publicador/valorarEspectaculo/Fault/EspectadorNoExisteException"),
        @FaultAction(className = ValoracionNoValidaException_Exception.class, value = "http://webservices/Publicador/valorarEspectaculo/Fault/ValoracionNoValidaException")
    })
    public void valorarEspectaculo(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        ValoracionDto arg3)
        throws EspectaculoNoExisteException_Exception, EspectadorNoExisteException_Exception, PlataformaNoExisteException_Exception, ValoracionNoValidaException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws PlataformaNoExisteException_Exception
     * @throws EspectaculoNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/guardarPremiosRequest", output = "http://webservices/Publicador/guardarPremiosResponse", fault = {
        @FaultAction(className = PlataformaNoExisteException_Exception.class, value = "http://webservices/Publicador/guardarPremios/Fault/PlataformaNoExisteException"),
        @FaultAction(className = EspectaculoNoExisteException_Exception.class, value = "http://webservices/Publicador/guardarPremios/Fault/EspectaculoNoExisteException")
    })
    public void guardarPremios(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        int arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3)
        throws EspectaculoNoExisteException_Exception, PlataformaNoExisteException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws FuncionNoExisteException_Exception
     * @throws PlataformaNoExisteException_Exception
     * @throws EspectaculoNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/hacerSorteoPremioRequest", output = "http://webservices/Publicador/hacerSorteoPremioResponse", fault = {
        @FaultAction(className = PlataformaNoExisteException_Exception.class, value = "http://webservices/Publicador/hacerSorteoPremio/Fault/PlataformaNoExisteException"),
        @FaultAction(className = EspectaculoNoExisteException_Exception.class, value = "http://webservices/Publicador/hacerSorteoPremio/Fault/EspectaculoNoExisteException"),
        @FaultAction(className = FuncionNoExisteException_Exception.class, value = "http://webservices/Publicador/hacerSorteoPremio/Fault/FuncionNoExisteException")
    })
    public void hacerSorteoPremio(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2)
        throws EspectaculoNoExisteException_Exception, FuncionNoExisteException_Exception, PlataformaNoExisteException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws PlataformaNoExisteException_Exception
     * @throws EspectaculoNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/guardarUrlVideoRequest", output = "http://webservices/Publicador/guardarUrlVideoResponse", fault = {
        @FaultAction(className = PlataformaNoExisteException_Exception.class, value = "http://webservices/Publicador/guardarUrlVideo/Fault/PlataformaNoExisteException"),
        @FaultAction(className = EspectaculoNoExisteException_Exception.class, value = "http://webservices/Publicador/guardarUrlVideo/Fault/EspectaculoNoExisteException")
    })
    public void guardarUrlVideo(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2)
        throws EspectaculoNoExisteException_Exception, PlataformaNoExisteException_Exception
    ;

    /**
     * 
     * @return
     *     returns webservices.CategoriaDtoList
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/getCategoriasRequest", output = "http://webservices/Publicador/getCategoriasResponse")
    public CategoriaDtoList getCategorias();

    /**
     * 
     * @param arg0
     */
    @WebMethod
    @Action(input = "http://webservices/Publicador/loggearActividadRequest", output = "http://webservices/Publicador/loggearActividadResponse")
    public void loggearActividad(
        @WebParam(name = "arg0", partName = "arg0")
        LogActividadDto arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns webservices.LogActividadDtoList
     * @throws AutenticacionException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/getLogsRequest", output = "http://webservices/Publicador/getLogsResponse", fault = {
        @FaultAction(className = AutenticacionException_Exception.class, value = "http://webservices/Publicador/getLogs/Fault/AutenticacionException")
    })
    public LogActividadDtoList getLogs(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws AutenticacionException_Exception
    ;

    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/generarUrlAccesoLogsRequest", output = "http://webservices/Publicador/generarUrlAccesoLogsResponse")
    public String generarUrlAccesoLogs();

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/nicknameOCorreoDisponibleRequest", output = "http://webservices/Publicador/nicknameOCorreoDisponibleResponse")
    public boolean nicknameOCorreoDisponible(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param fileName
     * @return
     *     returns byte[]
     * @throws IOException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://webservices/Publicador/getFileRequest", output = "http://webservices/Publicador/getFileResponse", fault = {
        @FaultAction(className = IOException_Exception.class, value = "http://webservices/Publicador/getFile/Fault/IOException")
    })
    public byte[] getFile(
        @WebParam(name = "fileName", partName = "fileName")
        String fileName)
        throws IOException_Exception
    ;

}
